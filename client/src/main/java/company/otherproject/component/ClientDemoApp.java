/* * Copyright (c) 2020. Lorem ipsum dolor sit amet, consectetur adipiscing elit. * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan. * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna. * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus. * Vestibulum commodo. Ut rhoncus gravida arcu. */package company.otherproject.component;import company.project.api.base.ApiRequest;import company.project.api.base.ApiResponse;import company.project.api.user.UserApi;import company.project.api.user.UserVo;/** * 一个远程调用方样例，主要演示rpc 调用中的一些问题. * <p> * tip: 不一定使用since ，因为调用方一般没人关心他的版本变化 ，因为没有人依赖它的代码 * * @author huang */public class ClientDemoApp {    public static void main(String[] args) {        // 一组模拟的用户id        long[] userIds = new long[]{1, 2, 3, 4, 5};        //模拟一个api ,实际的项目中应该由rpc 框架生成        UserApi userApi = null;        // tip: Api 结尾表名该类为一个rpc 调用，因此不允许下面这种循环调用        // tip: 你应该提供一个一次传递所有id,并返回一个用户数组的方法        for (long userId : userIds) {            /* it is bad ,it will waste more time*/            ApiResponse<UserVo> userById = userApi.findUserById(ApiRequest.simple(userId));        }    }}